#!/usr/bin/env bash

BASEDIR=$(pwd)
EXE=$BASEDIR'/dist/enlighten'
TESTDIR=/tmp/enlighten_testing
export BACKLIGHT_SEARCH_PATH="$TESTDIR:/sys/class/backlight:/sys/class/leds"
export BACKLIGHT_DEVICE=dev4

# setup the test env
mkdir -p "$TESTDIR"/dev{1,2,3,4,5}
echo 0 > "$TESTDIR"/dev2/brightness
echo 1 > "$TESTDIR"/dev3/max_brightness
echo 250 > "$TESTDIR"/dev4/brightness
echo 1347 > "$TESTDIR"/dev4/max_brightness
mkdir -p "$TESTDIR"/dev5/{max_,}brightness
touch "$TESTDIR"/notdev

# device detection
LIST=$(eval "$EXE" l)
printf 'ignore non-directories: [ %s ]\n' $([[ "$LIST" =~ 'notdev' ]] && echo 'FAIL' || echo 'PASS')
printf 'ignore empty directories: [ %s ]\n' $([[ "$LIST" =~ 'dev1' ]] && echo 'FAIL' || echo 'PASS')
printf 'ignore directories without max_brightness: [ %s ]\n' $([[ "$LIST" =~ 'dev2' ]] && echo 'FAIL' || echo 'PASS')
printf 'ignore directories without brightness: [ %s ]\n' $([[ "$LIST" =~ 'dev3' ]] && echo 'FAIL' || echo 'PASS')
printf 'ignore directories whose brightness are not regular files: [ %s ]\n' $([[ "$LIST" =~ 'dev5' ]] && echo 'FAIL' || echo 'PASS')
printf 'detect directories with both brightness files: [ %s ]\n' $([[ "$LIST" == *'dev4'* ]] && echo 'PASS' || echo 'FAIL')

# brightness fetching
GET=$(eval "$EXE")
printf 'properly fetches brightness: [ %s ]\n' $([[ "$GET" == '250 / 1347 (18%)' ]] && echo 'PASS' || echo 'FAIL')

# brightness manipulation
eval "$EXE" 0
GET=$(eval "$EXE")
printf 'properly sets brightness: [ %s ]\n' $([[ "$GET" == '0 / 1347 (0%)' ]] && echo 'PASS' || echo 'FAIL')

eval "$EXE" '+500'
GET=$(eval "$EXE")
printf 'properly increments brightness: [ %s ]\n' $([[ "$GET" == '500 / 1347 (37%)' ]] && echo 'PASS' || echo 'FAIL')

eval "$EXE" '-100'
GET=$(eval "$EXE")
printf 'properly decrements brightness: [ %s ]\n' $([[ "$GET" == '400 / 1347 (29%)' ]] && echo 'PASS' || echo 'FAIL')

eval "$EXE" '50%'
GET=$(eval "$EXE")
printf 'properly sets brightness by percent: [ %s ]\n' $([[ "$GET" == '673 / 1347 (49%)' ]] && echo 'PASS' || echo 'FAIL')

eval "$EXE" '+7%'
GET=$(eval "$EXE")
printf 'properly increments brightness by percent: [ %s ]\n' $([[ "$GET" == '767 / 1347 (56%)' ]] && echo 'PASS' || echo 'FAIL')

eval "$EXE" '-12%'
GET=$(eval "$EXE")
printf 'properly decrements brightness by percent: [ %s ]\n' $([[ "$GET" == '606 / 1347 (44%)' ]] && echo 'PASS' || echo 'FAIL')

GET=$(eval "$EXE" h 2>&1)
printf 'properly gets help output: [ %s ]\n' $([[ "$GET" == 'Usage'* ]] && echo 'PASS' || echo 'FAIL')

# garbage input

eval "$EXE" 0 # reset
GET=$(eval "$EXE")

eval "$EXE" '+pants' &> /dev/null
GET=$(eval "$EXE")
printf 'ignores basic garbage input: [ %s ]\n' $([[ "$GET" == '0 / 1347 (0%)' ]] && echo 'PASS' || echo 'FAIL')

# garbage environment
export BACKLIGHT_DEVICE=nonexistant
GET=$(eval "$EXE" 2>&1)
printf 'errors on basic garbage device name: [ %s ]\n' $([[ "$GET" =~ "Failed to find a match for the specified device" ]] && echo 'PASS' || echo 'FAIL')

export BACKLIGHT_SEARCH_PATH="$TESTDIR:/sys/class/backlight:/sys/class/leds:"
GET=$(eval "$EXE" 2>&1)
printf 'errors on basic garbage environment: [ %s ]\n' $([[ "$GET" == "Usage"* ]] && echo 'PASS' || echo 'FAIL')

rm -r "$TESTDIR"
